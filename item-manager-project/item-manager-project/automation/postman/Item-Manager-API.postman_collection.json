{
	"info": {
		"_postman_id": "item-manager-api-collection",
		"name": "Item Manager API",
		"description": "Comprehensive API testing collection for Item Manager backend with authentication and CRUD operations",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "item-manager-api"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('message', 'User created successfully');",
									"    pm.expect(response).to.have.property('token');",
									"    pm.expect(response).to.have.property('user');",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('authToken', response.token);",
									"    pm.environment.set('userId', response.user.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('message', 'Login successful');",
									"    pm.expect(response).to.have.property('token');",
									"    pm.expect(response).to.have.property('user');",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('authToken', response.token);",
									"    pm.environment.set('userId', response.user.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{testUserEmail}}\",\n    \"password\": \"{{testUserPassword}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('username');",
									"    pm.expect(response).to.have.property('email');",
									"    pm.expect(response).to.not.have.property('password');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Authentication endpoints for user registration, login, and profile management"
		},
		{
			"name": "Items CRUD",
			"item": [
				{
					"name": "Get All Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('title');",
									"    pm.expect(response).to.have.property('description');",
									"    pm.expect(response).to.have.property('_id');",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('itemId', response._id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Test Item {{$randomInt}}\",\n    \"description\": \"This is a test item created via Postman\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has updated fields\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('title', 'Updated Test Item');",
									"    pm.expect(response).to.have.property('description', 'Updated description');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Updated Test Item\",\n    \"description\": \"Updated description\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/items/{{itemId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"items",
								"{{itemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has success message\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('message', 'Item deleted successfully');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/items/{{itemId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"items",
								"{{itemId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "CRUD operations for items with authentication and error handling"
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5000",
			"type": "string"
		},
		{
			"key": "authToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "itemId",
			"value": "",
			"type": "string"
		}
	]
}
